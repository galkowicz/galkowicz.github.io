{"version":3,"sources":["state/appContext.ts","util.ts","components/Square.tsx","components/Board.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","squaresArray","Array","fill","step","isGameOver","winner","currentPlayer","winningLine","appReducer","state","action","type","payload","Error","getNextPlayer","Square","value","onClick","className","Board","onSquareClick","map","square","index","key","App","React","useReducer","dispatch","useEffect","winningConditions","i","length","winCondition","a","b","c","checkGame","gameOver","winningLineIndex","getGameResult","nextPlayer","newSquaresArray","chosenSquare","getNewSquaresArray","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oSAaaA,EAAyB,CACpCC,aAAc,IAAIC,MAAM,GAAGC,KAAK,IAChCC,KAAM,EACNC,YAAY,EACZC,OAAQ,GACRC,cAAe,IACfC,aAAc,GAGHC,EAAa,SAACC,EAAiBC,GAC1C,OAAQA,EAAOC,MACb,IAAK,WAAa,IAAD,EAC+BD,EAAOE,QAA7CT,EADO,EACPA,KAAMG,EADC,EACDA,cAAeN,EADd,EACcA,aAE7B,OAAO,eAAKS,EAAZ,CAAmBN,OAAMG,gBAAeN,iBAE1C,IAAK,WAAa,IAAD,EACiBU,EAAOE,QAA/BL,EADO,EACPA,YAAaF,EADN,EACMA,OAErB,OAAO,eAAKI,EAAZ,CAAmBL,YAAY,EAAMC,SAAQE,gBAE/C,IAAK,YACH,OAAO,eAAKR,GAGd,QACE,MAAM,IAAIc,MAAM,mB,OCrCTC,EAAgB,SAACR,GAC5B,MAAsB,MAAlBA,EACK,IAEF,KCWMS,G,MARuB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAC9C,OACE,4BAAQC,UAAS,iBAAYF,GAASL,KAAK,SAASM,QAASA,GAC1DD,KCaQG,G,MAdqB,SAAC,GAAkD,IAAhDnB,EAA+C,EAA/CA,aAAcoB,EAAiC,EAAjCA,cAAeb,EAAkB,EAAlBA,YAClE,OACE,oCACE,yBAAKW,UAAS,aAAQX,KACtB,yBAAKW,UAAU,SACZlB,EAAaqB,KAAI,SAACC,EAAQC,GAEzB,OAAO,kBAAC,EAAD,CAAQC,IAAKD,EAAOP,MAAOM,EAAQL,QAAS,kBAAMG,EAAcG,aCqClEE,G,MA9CO,WAAO,IAAD,EACAC,IAAMC,WAAWnB,EAAYT,GAD7B,mBACnBU,EADmB,KACZmB,EADY,KAElBtB,EAAuEG,EAAvEH,cAAeN,EAAwDS,EAAxDT,aAAcG,EAA0CM,EAA1CN,KAAMC,EAAoCK,EAApCL,WAAYC,EAAwBI,EAAxBJ,OAAQE,EAAgBE,EAAhBF,YA2B/D,OATAmB,IAAMG,WAAU,WACd,GAAI1B,EAAO,EAAG,CAAC,IAAD,EHdO,SAACH,GAexB,IAdA,IAAII,GAAa,EACbG,GAAe,EAEbuB,EAAoB,CACxB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAC,EAAI,EAAGA,EAAID,EAAkBE,OAAQD,GAAK,EAAG,CACpD,IAAME,EAAeH,EAAkBC,GAEjCG,EAAIlC,EAAaiC,EAAa,IAC9BE,EAAInC,EAAaiC,EAAa,IAC9BG,EAAIpC,EAAaiC,EAAa,IAIpC,KAFyB,KAANC,GAAkB,KAANC,GAAkB,KAANC,IAExBF,IAAMC,GAAKA,IAAMC,EAAG,CACrChC,GAAa,EACbG,EAAcwB,EACd,OAIJ,MAAO,CAAC3B,EAAYG,GGhBqB8B,CAAUrC,GADnC,mBACLsC,EADK,KACKC,EADL,KAERD,GACFV,EAAS,CAAEjB,KAAM,WAAYC,QAAS,CAAEP,OAAQS,EAAcR,GAAgBC,YAAagC,QAG9F,CAACpC,IAGF,yBAAKe,UAAU,iBACb,wBAAIA,UAAU,SAAd,eACEd,EAGA,4BHMqB,SAACC,GAC5B,MAAe,KAAXA,EACI,UAAN,OAAiBA,EAAjB,kBAEK,2BGVImC,CAAcnC,IAFnB,wBAAIa,UAAU,kBAAd,eAAwCZ,EAAxC,UAIF,kBAAC,EAAD,CAAON,aAAcA,EAAcoB,cA7Bb,SAACE,GACzB,GAA6B,KAAzBtB,EAAasB,KAAkBlB,EAAnC,CAEA,IAAMqC,EAAa3B,EAAcR,GAC3BoC,EHZwB,SAAC1C,EAAwBM,EAAuBqC,GAChF,IAAMD,EAAe,YAAO1C,GAG5B,OAFA0C,EAAgBC,GAAgBrC,EAEzBoC,EGQmBE,CAAmB5C,EAAcM,EAAegB,GAExEM,EAAS,CACPjB,KAAM,WACNC,QAAS,CAAET,KAAMA,EAAO,EAAGG,cAAemC,EAAYzC,aAAc0C,OAqBCnC,YAAaA,IAElF,4BAAQW,UAAU,YAAYP,KAAK,SAASM,QAnC9B,WAChBW,EAAS,CAAEjB,KAAM,gBAkCf,iBCpCckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7eb36e7a.chunk.js","sourcesContent":["import { AppActions } from './appActions'\n\nexport type Player = 'o' | 'x'\n\nexport type AppState = {\n  squaresArray: string[]\n  step: number\n  isGameOver: boolean\n  winningLine: number\n  readonly winner: '' | 'o' | 'x'\n  readonly currentPlayer: Player\n}\n\nexport const initialState: AppState = {\n  squaresArray: new Array(9).fill(''),\n  step: 0,\n  isGameOver: false,\n  winner: '',\n  currentPlayer: 'x',\n  winningLine: -1,\n}\n\nexport const appReducer = (state: AppState, action: AppActions): AppState => {\n  switch (action.type) {\n    case 'GameTick': {\n      const { step, currentPlayer, squaresArray } = action.payload\n\n      return { ...state, step, currentPlayer, squaresArray }\n    }\n    case 'GameOver': {\n      const { winningLine, winner } = action.payload\n\n      return { ...state, isGameOver: true, winner, winningLine }\n    }\n    case 'ResetGame': {\n      return { ...initialState }\n    }\n\n    default:\n      throw new Error('reducer error')\n  }\n}\n","import { Player } from './state/appContext'\n\nexport const getNextPlayer = (currentPlayer: Player): Player => {\n  if (currentPlayer === 'x') {\n    return 'o'\n  }\n  return 'x'\n}\n\nexport const getNewSquaresArray = (squaresArray: string[], currentPlayer: Player, chosenSquare: number): string[] => {\n  const newSquaresArray = [...squaresArray]\n  newSquaresArray[chosenSquare] = currentPlayer\n\n  return newSquaresArray\n}\n\nexport const checkGame = (squaresArray: string[]): [boolean, number] => {\n  let isGameOver = false\n  let winningLine = -1\n\n  const winningConditions = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ]\n\n  for (let i = 0; i < winningConditions.length; i += 1) {\n    const winCondition = winningConditions[i]\n\n    const a = squaresArray[winCondition[0]]\n    const b = squaresArray[winCondition[1]]\n    const c = squaresArray[winCondition[2]]\n\n    const isRowEmpty = a === '' || b === '' || c === ''\n\n    if (!isRowEmpty && a === b && b === c) {\n      isGameOver = true\n      winningLine = i\n      break\n    }\n  }\n\n  return [isGameOver, winningLine]\n}\n\nexport const getGameResult = (winner: Player | ''): string => {\n  if (winner !== '') {\n    return `Player ${winner} is the winner`\n  }\n  return 'The Game ended in a draw'\n}\n","import React from 'react'\n\nimport './Square.scss'\n\ntype SquareProps = {\n  value: string\n  onClick(event: React.MouseEvent<HTMLButtonElement>): void\n}\n\nconst Square: React.FC<SquareProps> = ({ value, onClick }) => {\n  return (\n    <button className={`square ${value}`} type=\"button\" onClick={onClick}>\n      {value}\n    </button>\n  )\n}\n\nexport default Square\n","import React from 'react'\nimport Square from './Square'\n\nimport './Board.scss'\n\ntype BoardProps = {\n  squaresArray: string[]\n  onSquareClick(index: number): void\n  winningLine: number\n}\n\nconst Board: React.FC<BoardProps> = ({ squaresArray, onSquareClick, winningLine }) => {\n  return (\n    <>\n      <div className={`win${winningLine}`} />\n      <div className=\"board\">\n        {squaresArray.map((square, index) => {\n          // eslint-disable-next-line react/no-array-index-key\n          return <Square key={index} value={square} onClick={() => onSquareClick(index)} />\n        })}\n      </div>\n    </>\n  )\n}\n\nexport default Board\n","import React from 'react'\n\nimport { appReducer, initialState } from './state/appContext'\nimport { checkGame, getGameResult, getNewSquaresArray, getNextPlayer } from './util'\n\nimport Board from './components/Board'\n\nimport './App.scss'\n\nconst App: React.FC = () => {\n  const [state, dispatch] = React.useReducer(appReducer, initialState)\n  const { currentPlayer, squaresArray, step, isGameOver, winner, winningLine } = state\n\n  const resetGame = () => {\n    dispatch({ type: 'ResetGame' })\n  }\n\n  const handleSquareClick = (square: number) => {\n    if (squaresArray[square] !== '' || isGameOver) return\n\n    const nextPlayer = getNextPlayer(currentPlayer)\n    const newSquaresArray = getNewSquaresArray(squaresArray, currentPlayer, square)\n\n    dispatch({\n      type: 'GameTick',\n      payload: { step: step + 1, currentPlayer: nextPlayer, squaresArray: newSquaresArray },\n    })\n  }\n\n  React.useEffect(() => {\n    if (step > 4) {\n      const [gameOver, winningLineIndex] = checkGame(squaresArray)\n      if (gameOver) {\n        dispatch({ type: 'GameOver', payload: { winner: getNextPlayer(currentPlayer), winningLine: winningLineIndex } })\n      }\n    }\n  }, [step]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div className=\"App container\">\n      <h1 className=\"title\">Tic Tac Toe</h1>\n      {!isGameOver ? (\n        <h2 className=\"current-player\">{`It's ${currentPlayer} turn`}</h2>\n      ) : (\n        <h2>{getGameResult(winner)}</h2>\n      )}\n      <Board squaresArray={squaresArray} onSquareClick={handleSquareClick} winningLine={winningLine} />\n\n      <button className=\"reset-btn\" type=\"button\" onClick={resetGame}>\n        Reset Game\n      </button>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}