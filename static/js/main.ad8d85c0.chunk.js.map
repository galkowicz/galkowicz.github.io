{"version":3,"sources":["fakeDB.ts","components/Table/index.tsx","components/Dropdown/index.tsx","components/ManagersForm/index.tsx","components/AccountsForm/index.tsx","App.tsx","util.tsx","serviceWorker.ts","index.tsx"],"names":["Status","Table","tableData","onRowClick","handleRowClick","e","currentTarget","id","className","cellPadding","cellSpacing","Object","keys","data","map","item","key","index","metadata","attributes","reduce","acc","cur","metadataToCustomAttributes","onClick","values","colData","Dropdown","options","onSelect","placeholder","defaultValue","modifier","React","useState","chosenOption","setChosenOption","useEffect","name","onChange","value","ManagersForm","managersData","onNewManager","setName","selectedManager","setSelectedManager","nextId","length","existingManagers","type","selected","includes","toString","AccountsForm","accountsData","onNewAccount","isActive","setIsActive","existingAccounts","checked","managers","manager","accounts","accountManager","status","active","closed","App","appManagers","setAppManagers","appAccounts","setAppAccounts","managerEmployees","setManagerEmployees","parsedManagers","noAccounts","managerName","find","account","isManagerWithNoAccounts","noaccounts","parseManagersData","parsedAccounts","disabled","isHighlighted","isAccountManagedBySelected","findIndex","isAccountOfSelected","isHighlightedAccount","ishighlighted","parseAccountsData","managerId","getManagerById","managersArray","result","recursiveSearch","forEach","managersFound","filter","findAllEmployeesOfManager","managersName","newManagerObject","newAccountObject","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ad8d85c0.chunk.js","sourcesContent":["export interface Manager {\n  id: string\n  name: string\n  manager: string | null\n}\n\nexport interface Account {\n  id: string\n  name: string\n  accountManager: string\n  status: Status\n}\n\nexport enum Status {\n  active = 'ACTIVE',\n  closed = 'CLOSED',\n}\n\nconst managers: Manager[] = [\n  { id: '1', name: 'alice', manager: null },\n  { id: '2', name: 'bob', manager: 'alice' },\n  { id: '3', name: 'charlie', manager: 'alice' },\n  { id: '4', name: 'dave', manager: 'bob' },\n  { id: '5', name: 'eve', manager: 'charlie' },\n  { id: '6', name: 'frank', manager: null },\n  { id: '7', name: 'grace', manager: 'ivan' },\n  { id: '8', name: 'heidi', manager: 'alice' },\n  { id: '9', name: 'ivan', manager: 'bob' },\n]\n\nconst accounts: Account[] = [\n  { id: '1', name: 'hp', accountManager: 'alice', status: Status.active },\n  { id: '2', name: 'ibm', accountManager: 'bob', status: Status.active },\n  { id: '3', name: 'google', accountManager: 'charlie', status: Status.active },\n  { id: '4', name: 'mySpace', accountManager: 'eve', status: Status.closed },\n  { id: '5', name: 'united', accountManager: 'dave', status: Status.active },\n  { id: '6', name: 'facebook', accountManager: 'bob', status: Status.active },\n  { id: '7', name: 'amazon', accountManager: 'bob', status: Status.closed },\n  { id: '8', name: 'monday', accountManager: 'heidi', status: Status.closed },\n  { id: '9', name: 'gm', accountManager: 'bob', status: Status.active },\n  { id: '10', name: 'britishAirways', accountManager: 'frank', status: Status.active },\n  { id: '11', name: 'apple', accountManager: 'frank', status: Status.active },\n  { id: '12', name: 'microsoft', accountManager: 'ivan', status: Status.closed },\n]\n\nexport { managers, accounts }\n","import React from 'react'\nimport './table.scss'\n\nexport interface TableData {\n  data: { id: string, name?: string }\n  [metadata: string]: any\n}\n\ntype Props = {\n  tableData: TableData[]\n  onRowClick?(rowId: string): void\n}\n\nconst metadataToCustomAttributes = (metadata: any) => {\n  return Object.keys(metadata).reduce((acc, cur) => {\n    return { ...acc, [`data-${cur}`]: metadata[cur] }\n  }, {})\n}\n\nconst Table: React.FC<Props> = ({ tableData = [], onRowClick = () => null }) => {\n  const handleRowClick = (e: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => {\n    onRowClick(e.currentTarget.id)\n  }\n\n  return (\n    <table className=\"table container\" cellPadding=\"0\" cellSpacing=\"0\">\n      <thead className=\"table__header\">\n        <tr className=\"table-row\">\n          {Object.keys(tableData[0].data).map((item) => (\n            <th key={item}>{item}</th>\n          ))}\n        </tr>\n      </thead>\n\n      <tbody className=\"table__body\">\n        {tableData.map((item, index) => {\n          const { data, metadata = {} } = item\n          const attributes = metadataToCustomAttributes(metadata)\n\n          return (\n            <tr className=\"table-row\" key={index} onClick={handleRowClick} id={data.id} {...attributes}>\n              {Object.values(data).map((colData) => (\n                <td key={`${index}-${colData}`}>{colData}</td>\n              ))}\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n\nexport default Table\n","import React from 'react'\n\ntype Props = {\n  options: (string | undefined)[]\n  onSelect(option: string): void\n  modifier?: string\n  placeholder?: string\n  defaultValue?: string\n}\n\nconst Dropdown: React.FC<Props> = ({ options, onSelect, placeholder = null, defaultValue = '', modifier = '' }) => {\n  const [chosenOption, setChosenOption] = React.useState(defaultValue)\n  \n  React.useEffect(() => {\n    setChosenOption(defaultValue)\n  }, [defaultValue])\n\n  const handleSelectChange = (e: React.FormEvent<HTMLSelectElement>) => {\n    setChosenOption(e.currentTarget.value)\n    onSelect(e.currentTarget.value)\n  }\n\n  return (\n    <select\n      className={`dropdown dropdown--${modifier}`}\n      name=\"select\"\n      id=\"select\"\n      onChange={handleSelectChange}\n      value={chosenOption}\n    >\n      {placeholder && <option value=\"\">{placeholder}</option>}\n      {options.map((item) => (\n        <option key={item} value={item}>\n          {item}\n        </option>\n      ))}\n    </select>\n  )\n}\n\nexport default Dropdown\n","import React from 'react'\nimport './managersForm.scss'\n\nimport Dropdown from '../Dropdown'\n\nimport { TableData } from '../Table'\n\ntype Props = {\n  managersData: TableData[]\n  onNewManager?(id: string, name: string, managersName: string): void\n}\n\nconst ManagersForm: React.FC<Props> = ({ managersData = [], onNewManager = () => null }) => {\n  const [name, setName] = React.useState('')\n  const [selectedManager, setSelectedManager] = React.useState('')\n\n  const nextId = managersData.length + 1\n  const existingManagers = ['', ...managersData.map((item) => item.data.name)]\n\n  const handleNameChange = (e: React.FormEvent<HTMLInputElement>) => {\n    setName(e.currentTarget.value)\n  }\n\n  const handleSubmit = () => {\n    const isNameAvailable = !existingManagers.includes(name)\n\n    if (isNameAvailable) {\n      onNewManager(nextId.toString(), name, selectedManager)\n      setName('')\n      setSelectedManager('')\n    }\n  }\n\n  const handleSelectChange = (selected: string) => {\n    setSelectedManager(selected)\n  }\n\n  return (\n    <div className=\"add-manager container\">\n      <div className=\"new-id\">{nextId}</div>\n      <div className=\"new-name\">\n        <input placeholder=\"Manager\" type=\"text\" onChange={handleNameChange} value={name} />\n      </div>\n      <div className=\"managers\">\n        <Dropdown\n          modifier=\"managers\"\n          options={existingManagers}\n          defaultValue={selectedManager}\n          placeholder=\"--Please choose a manager--\"\n          onSelect={handleSelectChange}\n        />\n      </div>\n      <div className=\"submit\">\n        <button onClick={handleSubmit}>Add</button>\n      </div>\n    </div>\n  )\n}\n\nexport default ManagersForm\n","import React from 'react'\nimport './AccountsForm.scss'\n\nimport Dropdown from '../Dropdown'\nimport { TableData } from '../Table'\n\ntype Props = {\n  managersData: TableData[]\n  accountsData: TableData[]\n  onNewAccount?(id: string, name: string, managersName: string, isActive: boolean): void\n}\n\nconst AccountsForm: React.FC<Props> = ({ managersData = [], accountsData = [], onNewAccount = () => null }) => {\n  const [name, setName] = React.useState('')\n  const [selectedManager, setSelectedManager] = React.useState('')\n  const [isActive, setIsActive] = React.useState(true)\n\n  const nextId = accountsData.length + 1\n  const existingAccounts = ['', ...accountsData.map((item) => item.data.name)]\n  const existingManagers = [...managersData.map((item) => item.data.name)]\n\n  const handleNameChange = (e: React.FormEvent<HTMLInputElement>) => {\n    setName(e.currentTarget.value)\n  }\n\n  const handleSubmit = () => {\n    const isNameAvailable = !existingAccounts.includes(name)\n\n    if (isNameAvailable && selectedManager !== '') {\n      onNewAccount(nextId.toString(), name, selectedManager, isActive)\n      setName('')\n      setSelectedManager('')\n      setIsActive(true)\n    }\n  }\n\n  const handleStatusChange = () => {\n    setIsActive(!isActive)\n  }\n\n  const handleSelectChange = (selected: string) => {\n    setSelectedManager(selected)\n  }\n\n  return (\n    <div className=\"add-account container\">\n      <div className=\"new-id\">{nextId}</div>\n      <div className=\"new-name\">\n        <input placeholder=\"Account\" type=\"text\" onChange={handleNameChange} value={name} />\n      </div>\n      <div className=\"accounts\">\n        <Dropdown\n          modifier=\"accounts\"\n          options={existingManagers}\n          defaultValue={selectedManager}\n          placeholder=\"--Please choose an account manager--\"\n          onSelect={handleSelectChange}\n        />\n      </div>\n      <div className=\"status\">\n        <input type=\"checkbox\" checked={isActive} onChange={handleStatusChange} />\n      </div>\n      <div className=\"submit\">\n        <button onClick={handleSubmit}>Add</button>\n      </div>\n    </div>\n  )\n}\n\nexport default AccountsForm\n","import React from 'react'\nimport './App.scss'\n\nimport Table from './components/Table'\nimport ManagersForm from './components/ManagersForm'\nimport AccountsForm from './components/AccountsForm'\n\nimport { managers, accounts, Status } from './fakeDB'\nimport { parseAccountsData, parseManagersData, findAllEmployeesOfManager, getManagerById } from './util'\n\nfunction App() {\n  const [appManagers, setAppManagers] = React.useState(managers)\n  const [appAccounts, setAppAccounts] = React.useState(accounts)\n  const [selectedManager, setSelectedManager] = React.useState('')\n  const [managerEmployees, setManagerEmployees] = React.useState([''])\n\n  const handleManagerClick = (managerId: string) => {\n    const selectedManager = getManagerById(managerId, managers)\n    const { name } = selectedManager || { name: '' }\n    const managerEmployees = findAllEmployeesOfManager([name], managers)\n\n    setSelectedManager(name)\n    setManagerEmployees(managerEmployees)\n  }\n\n  const handleAddNewManager = (id: string, name: string, managersName: string) => {\n    const newManagerObject = {\n      id,\n      name,\n      manager: managersName,\n    }\n    setAppManagers([...appManagers, newManagerObject])\n  }\n\n  const handleAddNewAccount = (id: string, name: string, managersName: string, isActive: boolean) => {\n    const status = isActive ? Status.active : Status.closed\n    const newAccountObject = {\n      id,\n      name,\n      accountManager: managersName,\n      status,\n    }\n    setAppAccounts([...appAccounts, newAccountObject])\n  }\n\n  const parsedManagers = parseManagersData(appManagers, appAccounts, selectedManager)\n  const parsedAccounts = parseAccountsData(appAccounts, managerEmployees, selectedManager)\n\n  return (\n    <div className=\"App container\">\n      <div className=\"managers container\">\n        <Table tableData={parsedManagers} onRowClick={handleManagerClick} />\n        <ManagersForm managersData={parsedManagers} onNewManager={handleAddNewManager} />\n      </div>\n      <div className=\"accounts container\">\n        <Table tableData={parsedAccounts} />\n        <AccountsForm managersData={parsedManagers} accountsData={parsedAccounts} onNewAccount={handleAddNewAccount} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import { Account, Manager, Status } from './fakeDB'\n\nconst isManagerWithNoAccounts = (managerName: string, accounts: Account[]) => {\n  const accountFound = accounts.find((account) => account.accountManager === managerName)\n  return !accountFound\n}\n\nconst isHighlightedAccount = (account: Account, managerEmployees: string[], selectedManager: string) => {\n  const isAccountManagedBySelected = managerEmployees.findIndex((name: string) => name === account.accountManager)\n  const isAccountOfSelected = account.accountManager === selectedManager\n\n  return isAccountManagedBySelected !== -1 || isAccountOfSelected\n}\n\nconst parseAccountsData = (accounts: Account[], managerEmployees: string[], selectedManager: string) => {\n  return accounts.map((account) => {\n    const disabled = account.status === Status.closed\n    const isHighlighted = isHighlightedAccount(account, managerEmployees, selectedManager)\n\n    return { data: { ...account }, metadata: { disabled, ishighlighted: isHighlighted } }\n  })\n}\n\nconst parseManagersData = (managers: Manager[], accounts: Account[], selectedManager: string) => {\n  return managers.map((manager) => {\n    const noAccounts = isManagerWithNoAccounts(manager.name, accounts)\n    const selected = selectedManager === manager.name\n\n    return { data: { ...manager }, metadata: { noaccounts: noAccounts, selected} }\n  })\n}\n\nconst findAllEmployeesOfManager = (managersArray: string[], managers: Manager[]) => {\n  let result: Array<string> = []\n\n  const recursiveSearch = (managersArray: string[], managers: Manager[]) => {\n    if (managersArray.length === 0) {\n      return result\n    }\n\n    managersArray.forEach((managerName) => {\n      const managersFound = managers\n        .filter((manager) => {\n          return manager.manager === managerName\n        })\n        .map((manager) => manager.name)\n      result = [...result, ...managersFound]\n\n      recursiveSearch(managersFound, managers)\n    })\n  }\n\n  recursiveSearch(managersArray, managers)\n\n  return result\n}\n\nconst getManagerById = (managerId: string, managers: Manager[]) => {\n  return managers.find((manager) => manager.id === managerId)\n}\n\nexport { parseAccountsData, parseManagersData, findAllEmployeesOfManager, getManagerById }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}