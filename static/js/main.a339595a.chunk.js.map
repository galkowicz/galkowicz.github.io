{"version":3,"sources":["store/useStore.tsx","types/appActions.ts","store/reducer.ts","util.ts","components/StarWarsSearch.tsx","components/Ships.tsx","components/ListItem.tsx","components/CharactersList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["context","React","createContext","StoreProvider","children","appReducer","initialState","storageKey","JSON","parse","localStorage","getItem","useReducer","store","action","newState","setItem","stringify","dispatch","contextValue","useMemo","Provider","value","useContext","Actions","state","type","payload","people","searchString","url","starships","name","selectedIndex","selectedItem","Error","accumulatedResults","fetchAllPeople","a","Promise","resolve","fetch","response","json","results","next","push","replace","fetchShips","shipsUrl","all","map","parsePeopleData","data","item","toLowerCase","displayName","StarWarsSearch","useStore","useState","setSearchString","useEffect","parsedData","initialFetch","useDebounce","Grid","Column","width","Input","onChange","e","currentTarget","placeholder","Ships","shipsList","setShipsList","role","className","style","marginLeft","length","ship","key","ListItem","isSelected","index","onClick","CharactersList","list","setList","updatedList","filter","includes","Container","marginTop","Header","as","rowRenderer","rowCount","height","rowHeight","App","columns","divided","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a339595a.chunk.js","sourcesContent":["import React from 'react'\nimport { AppActions } from '../types/appActions'\n\ntype ContextState = any\n\ndeclare interface StoreProps {\n  children: React.ReactNode\n  appReducer: (store: ContextState, action: AppActions) => ContextState\n  initialState: ContextState\n  storageKey: string\n}\n\nconst context = React.createContext({} as ContextState)\n\nexport const StoreProvider: React.FC<StoreProps> = ({\n  children,\n  appReducer,\n  initialState = {},\n  storageKey,\n}: StoreProps) => {\n  try {\n    // eslint-disable-next-line no-param-reassign\n    initialState = JSON.parse(localStorage.getItem(storageKey) as any) || initialState\n  } catch {}\n\n  // wrap reducer with localStorage functionality\n  const reducer = (store: ContextState, action: AppActions) => {\n    const newState = appReducer(store, action)\n    localStorage.setItem(storageKey, JSON.stringify(newState))\n    return { ...newState }\n  }\n\n  const [store, dispatch] = React.useReducer(reducer, initialState)\n\n  const contextValue = React.useMemo(() => [store, dispatch], [store])\n\n  return <context.Provider value={contextValue}>{children}</context.Provider>\n}\n\nexport default (): [ContextState, React.Dispatch<AppActions>] => {\n  return React.useContext(context)\n}\n","// eslint-disable-next-line max-classes-per-file\nexport const Actions = {\n  SET_ALL_PEOPLE: 'setAllPeople',\n  SET_SEARCH_STRING: 'setSearchString',\n  SELECT_ITEM: 'selectItem',\n}\n\nexport interface AppAction {\n  type: string\n}\n\nexport interface Character {\n  displayName: string\n  name: string\n  starships: string[]\n  url: string\n}\n\nexport class SetAllPeople implements AppAction {\n  readonly type = Actions.SET_ALL_PEOPLE\n\n  constructor(public payload: { people: Character[] }) {}\n}\n\nexport class SetSearchString implements AppAction {\n  readonly type = Actions.SET_SEARCH_STRING\n\n  constructor(public payload: { searchString: string }) {}\n}\n\nexport class SelectItem implements AppAction {\n  readonly type = Actions.SET_SEARCH_STRING\n\n  constructor(public payload: { url: string; starships: string[]; name: string; selectedIndex: number }) {}\n}\n\nexport type AppActions = SetAllPeople | SetSearchString | SelectItem\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport { Actions, AppActions } from '../types/appActions'\n\ninterface AppState {\n  searchString: string\n  people: { displayName: string; name: string; starships: string[]; url: string }[]\n  selectedItem: { name: string; starships: string[]; selectedIndex: number; url: string }\n}\n\nconst appReducer = (state: AppState, action: AppActions): AppState => {\n  const { type, payload } = action\n\n  switch (type) {\n    case Actions.SET_ALL_PEOPLE: {\n      const { people } = payload\n      return { ...state, people }\n    }\n\n    case Actions.SET_SEARCH_STRING: {\n      const { searchString } = payload\n      return { ...state, searchString }\n    }\n\n    case Actions.SELECT_ITEM: {\n      const { url, starships, name, selectedIndex } = payload\n      return { ...state, selectedItem: { starships, url, name, selectedIndex } }\n    }\n\n    default:\n      throw new Error()\n  }\n}\n\nexport default appReducer\n","import { Character } from './types/appActions'\n\nconst accumulatedResults: any = []\nexport const BASE_URL = 'https://swapi.dev/api'\n\nexport const fetchAllPeople = async (url: string): Promise<any> => {\n  if (!url) return Promise.resolve(accumulatedResults)\n  const response = await fetch(url)\n  const { results, next } = await response.json()\n  accumulatedResults.push(...results)\n  return fetchAllPeople(next && next.replace('http', 'https'))\n}\n\nexport const fetchShips = async (shipsUrl: string[]): Promise<any> => {\n  return Promise.all(\n    shipsUrl.map(async (url) => {\n      const response = await fetch(url)\n      return response.json()\n    }),\n  )\n}\n\nexport const parsePeopleData = (data: Array<any>): Array<Character> => {\n  return data.map((item) => {\n    const { name, starships, url } = item\n    return { name: name.toLowerCase(), starships, url, displayName: name }\n  })\n}\n","import React from 'react'\nimport { useDebounce } from 'react-use'\nimport { Grid, Input } from 'semantic-ui-react'\n\nimport useStore from '../store/useStore'\nimport { fetchAllPeople, parsePeopleData, BASE_URL } from '../util'\nimport { Actions } from '../types/appActions'\n\nconst StarWarsSearch: React.FC = () => {\n  const [, dispatch] = useStore()\n  const [searchString, setSearchString] = React.useState('')\n\n  React.useEffect(() => {\n    const initialFetch = async () => {\n      const data = await fetchAllPeople(`${BASE_URL}/people/`)\n      const parsedData = parsePeopleData(data)\n      dispatch({ type: Actions.SET_ALL_PEOPLE, payload: { people: parsedData } })\n    }\n    initialFetch()\n  }, [dispatch])\n\n  useDebounce(\n    () => {\n      dispatch({ type: Actions.SET_SEARCH_STRING, payload: { searchString } })\n    },\n    300,\n    [searchString],\n  )\n\n  const handleInputChange = (e: React.FormEvent<HTMLInputElement>): void => {\n    setSearchString(e.currentTarget.value)\n  }\n\n  return (\n    <Grid>\n      <Grid.Column width={6}>\n        <Input onChange={handleInputChange} placeholder=\"Search...\" />\n      </Grid.Column>\n    </Grid>\n  )\n}\n\nexport default StarWarsSearch\n","import React from 'react'\nimport { fetchShips } from '../util'\nimport useStore from '../store/useStore'\n\nconst Ships: React.FC = () => {\n  const [store] = useStore()\n  const { selectedItem } = store\n  const { name, starships } = selectedItem\n\n  const [shipsList, setShipsList] = React.useState([])\n  React.useEffect(() => {\n    const initialFetch = async () => {\n      if (name) {\n        const data = await fetchShips(starships)\n        setShipsList(data)\n      }\n    }\n    initialFetch()\n  }, [starships, name])\n\n  if (!name) return null\n\n  return (\n    <div role=\"presentation\" className=\"ships\" style={{ marginLeft: '4px' }}>\n      <div>{`${name}'s startships:`}</div>\n      {shipsList && (\n        <ul>\n          {shipsList.length > 0 &&\n            shipsList.map((ship: { url: string; name: string }) => <li key={ship.url}>{ship.name}</li>)}\n        </ul>\n      )}\n    </div>\n  )\n}\n\nexport default Ships\n","import React from 'react'\nimport useStore from '../store/useStore'\n\nimport './ListItem.scss'\nimport { Actions } from '../types/appActions'\nimport Ships from './Ships'\n\ninterface ItemProps {\n  name: string\n  url: string\n  starships: string[]\n  isSelected: boolean\n  index: number\n}\n\nconst ListItem: React.FC<ItemProps> = ({ name, url, starships, isSelected, index }) => {\n  const [, dispatch] = useStore()\n  const handleSelectItem = () => {\n    dispatch({ type: Actions.SELECT_ITEM, payload: { url, starships, name, selectedIndex: index } })\n  }\n\n  return (\n    <div role=\"presentation\" className={`list-item ${isSelected ? 'selected' : ''}`} onClick={handleSelectItem}>\n      <div>{name}</div>\n      {isSelected && <Ships />}\n    </div>\n  )\n}\n\nexport default ListItem\n","import React from 'react'\nimport { List, ListRowProps } from 'react-virtualized'\nimport { Container, Header } from 'semantic-ui-react'\nimport useStore from '../store/useStore'\nimport ListItem from './ListItem'\nimport { Character } from '../types/appActions'\n\nconst CharactersList: React.FC = () => {\n  const [store] = useStore()\n  const { people, searchString, selectedItem } = store\n\n  const [list, setList] = React.useState(people)\n\n  React.useEffect(() => {\n    let updatedList\n    if (searchString !== '') {\n      updatedList = people.filter((item: Character) => item.name.includes(searchString.toLowerCase()))\n    } else {\n      updatedList = people\n    }\n\n    updatedList = updatedList.map((item: Character) => {\n      let isSelected = false\n      if (selectedItem && selectedItem.url === item.url) {\n        isSelected = true\n      }\n      return { ...item, isSelected }\n    })\n\n    setList(updatedList)\n  }, [searchString, selectedItem, people])\n\n  const getRowHeight = ({ index }: { index: number }) => {\n    const rowHeight = 30\n    if (selectedItem.selectedIndex === index) {\n      return selectedItem.starships.length * rowHeight\n    }\n    return rowHeight\n  }\n\n  const rowRenderer: React.FC<ListRowProps> = ({ key, index, style }) => {\n    const { displayName, url, starships, isSelected } = list[index]\n\n    return (\n      <div key={key} style={style}>\n        <ListItem name={displayName} url={url} starships={starships} isSelected={isSelected} index={index} />\n      </div>\n    )\n  }\n\n  return (\n    <Container style={{ marginTop: '2em' }}>\n      <Header as=\"h2\">Characters</Header>\n      <List rowRenderer={rowRenderer} rowCount={list.length} width={300} height={300} rowHeight={getRowHeight} />\n    </Container>\n  )\n}\n\nexport default CharactersList\n","import React from 'react'\nimport { Container, Header, Grid } from 'semantic-ui-react'\n\nimport { StoreProvider } from './store/useStore'\nimport appReducer from './store/reducer'\n\nimport StarWarsSearch from './components/StarWarsSearch'\n\nimport './App.scss'\nimport CharactersList from './components/CharactersList'\nimport Ships from './components/Ships'\n\nconst initialState = {\n  searchString: '',\n  people: [],\n  selectedItem: { name: null, starships: null, selectedIndex: -1 },\n}\n\nconst App: React.FC = () => {\n  return (\n    <StoreProvider storageKey=\"starWarsStore\" initialState={initialState} appReducer={appReducer}>\n      <Container style={{ marginTop: '2em' }}>\n        <Header as=\"h2\">STAR WARS FAN APP</Header>\n        <Grid columns={2} divided>\n          <Grid.Column>\n            <StarWarsSearch />\n            <CharactersList />\n          </Grid.Column>\n          <Grid.Column>\n            <Ships />\n          </Grid.Column>\n        </Grid>\n      </Container>\n    </StoreProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}