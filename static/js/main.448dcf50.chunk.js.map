{"version":3,"sources":["store/actions.ts","util.ts","store/reducer.ts","components/ContactsList.tsx","components/Contact.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Actions","fetchContacts","apiUrl","contactsAmount","a","data","i","fetch","response","json","results","info","push","id","seed","initialState","contacts","selectedContactIndex","isContactSelected","appReducer","state","action","type","setContacts","payload","SetSelectedContact","index","Error","ContactsList","onContactClick","List","Grid","divided","Row","columns","map","contact","Column","key","Item","onClick","Content","Card","Image","src","picture","medium","wrapped","ui","Header","firstName","lastName","Meta","phone","Contact","imageUrl","fullName","location","email","onBackClick","city","country","postcode","street","number","name","Icon","Segment","textAlign","centered","size","as","App","React","useReducer","dispatch","title","useEffect","parsedData","console","log","first","last","large","thumbnail","initialFetch","className","style","paddingTop","Container","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.448dcf50.chunk.js","sourcesContent":["// eslint-disable-next-line max-classes-per-file\nimport { Contact } from '../types'\n\nexport enum Actions {\n  setContacts = 'SET_CONTACTS',\n  SetSelectedContact = 'SET_SELECTED_CONTACT',\n}\n\nexport interface AppAction {\n  type: string\n}\n\nexport class SetContacts implements AppAction {\n  readonly type = Actions.setContacts\n\n  constructor(public payload: { contacts: Array<Contact> }) {}\n}\n\nexport class SetSelectedContact implements AppAction {\n  readonly type = Actions.SetSelectedContact\n\n  constructor(public payload: { index: number }) {}\n}\n\nexport type AppActions = SetContacts | SetSelectedContact\n","import { Contact } from './types'\n\nexport const fetchContacts = async (apiUrl: string, contactsAmount: number): Promise<Array<any>> => {\n  const data = []\n\n  for (let i = 0; i < contactsAmount; i++) {\n    try {\n      const response = await fetch(apiUrl)\n      const { results, info } = await response.json()\n      data.push({ ...results[0], id: info.seed })\n    } catch {}\n  }\n\n  return data\n}\n\nexport const parseContactsData = (rawList: Array<any>): Array<Contact> => {\n  return rawList.map((contact) => {\n    console.log('tthis is', contact);\n    const { name = {}, picture = {}, phone, email, location = {}, id } = contact\n    const { city, country, postcode, state, street } = location\n    return {\n      id,\n      firstName: name.first,\n      lastName: name.last,\n      title: name.title,\n      picture: { large: picture.large, medium: picture.medium, thumbnail: picture.thumbnail },\n      phone,\n      email,\n      location: { city, country, postcode, state, street },\n    }\n  })\n}\n","import { Actions, AppActions } from './actions'\nimport { Contact } from '../types'\n\nexport type AppState = {\n  contacts: Array<Contact>\n  selectedContactIndex: number\n  isContactSelected: boolean\n}\n\nexport const initialState: AppState = {\n  contacts: [],\n  selectedContactIndex: -1,\n  isContactSelected: false,\n}\n\nexport const appReducer = (state: AppState, action: AppActions): AppState => {\n  switch (action.type) {\n    case Actions.setContacts: {\n      const { contacts } = action.payload\n\n      return { ...state, contacts }\n    }\n    case Actions.SetSelectedContact: {\n      const { index } = action.payload\n      let isContactSelected = true\n      if (index === -1) {\n        isContactSelected = false\n      }\n\n      return { ...state, selectedContactIndex: index, isContactSelected }\n    }\n\n    default:\n      throw new Error('reducer error')\n  }\n}\n","import React from 'react'\nimport { List, Card, Image, Grid } from 'semantic-ui-react'\nimport { Contact } from '../types'\n\ninterface ContactsListProps {\n  contacts: Array<Contact>\n  isContactSelected: boolean\n  onContactClick(index: number): void\n}\n\nconst ContactsList: React.FC<ContactsListProps> = ({ contacts, onContactClick, isContactSelected }) => {\n  if (isContactSelected) return null\n  return (\n    <>\n      <List>\n        <Grid divided=\"vertically\">\n          <Grid.Row columns={2}>\n            {contacts.map((contact, index) => {\n              return (\n                <Grid.Column key={contact.id}>\n                  <List.Item\n                    onClick={() => {\n                      onContactClick(index)\n                    }}\n                  >\n                    <List.Content>\n                      <Card>\n                        <Image src={contact.picture.medium} wrapped ui={false} />\n                        <Card.Header>{`${contact.firstName} ${contact.lastName}`}</Card.Header>\n                        <Card.Meta>{`phone: ${contact.phone}`}</Card.Meta>\n                      </Card>\n                    </List.Content>\n                  </List.Item>\n                </Grid.Column>\n              )\n            })}\n          </Grid.Row>\n        </Grid>\n      </List>\n    </>\n  )\n}\n\nexport default ContactsList\n","import React from 'react'\nimport { Image, Segment, Header, Icon } from 'semantic-ui-react'\nimport { Location } from '../types'\n\ninterface ContactProps {\n  onBackClick(): void\n  isContactSelected: boolean\n  imageUrl: string\n  fullName: string\n  location: Location\n  email: string\n  phone: string\n}\n\nconst Contact: React.FC<ContactProps> = ({\n  imageUrl,\n  fullName,\n  location,\n  email,\n  isContactSelected,\n  onBackClick,\n  phone,\n}) => {\n  const { city = '', country = '', postcode = '', state = '', street = { number: '', name: '' } } = location || {}\n\n  if (!isContactSelected) return null\n\n  return (\n    <>\n      <Icon name=\"arrow left\" onClick={onBackClick}  />\n      <Segment textAlign=\"center\">\n        <Image src={imageUrl} centered size={'small'}/>\n        <Header as=\"h3\">{fullName}</Header>\n        <Header as=\"h3\">{email}</Header>\n        <Header as=\"h3\">{`${street.number} ${street.name}, ${city} ${country} ${state}, ${postcode}`}</Header>\n      </Segment>\n    </>\n  )\n}\n\nexport default Contact\n","import React from 'react'\nimport { Container, Header } from 'semantic-ui-react'\nimport './App.scss'\nimport { fetchContacts, parseContactsData } from './util'\nimport { appReducer, initialState } from './store/reducer'\nimport { Actions } from './store/actions'\nimport ContactsList from './components/ContactsList'\nimport Contact from './components/Contact'\n\nconst URL = 'https://randomuser.me/api'\nconst contactsAmount = 10\n\nconst App: React.FC = () => {\n  const [state, dispatch] = React.useReducer(appReducer, initialState)\n  const { contacts = [], selectedContactIndex, isContactSelected } = state\n\n  const { firstName, lastName, title, picture, phone, email, location } = contacts[selectedContactIndex] || {}\n\n  React.useEffect(() => {\n    const initialFetch = async () => {\n      const data = await fetchContacts(URL, contactsAmount)\n      const parsedData = parseContactsData(data)\n      dispatch({ type: Actions.setContacts, payload: { contacts: parsedData } })\n    }\n    initialFetch()\n  }, [])\n\n  return (\n    <div className=\"App\" style={{ paddingTop: '2em' }}>\n      <Container textAlign=\"center\">\n        <Header as=\"h2\">Randomize me!</Header>\n        <ContactsList\n          contacts={contacts}\n          isContactSelected={isContactSelected}\n          onContactClick={(index) => dispatch({ type: Actions.SetSelectedContact, payload: { index } })}\n        />\n        <Contact\n          onBackClick={() => dispatch({ type: Actions.SetSelectedContact, payload: { index: -1 } })}\n          isContactSelected={isContactSelected}\n          imageUrl={picture?.medium}\n          fullName={`${title} ${firstName} ${lastName}`}\n          location={location}\n          email={email}\n          phone={phone}\n        />\n      </Container>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}