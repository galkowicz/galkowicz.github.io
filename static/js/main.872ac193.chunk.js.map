{"version":3,"sources":["constants.js","components/chart.js","App.js","apService.js","serviceWorker.js","index.js"],"names":["BASE_URL","TIME_STAMP_LIST","Chart","data","this","prepareDataFromProps","props","react_default","a","createElement","es6","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","domain","content","chart_CustomTooltip","active","type","stroke","arguments","length","undefined","map","item","date","close","open","high","low","dateFromTimestamp","Date","day","getDate","month","getMonth","hour","getHours","year","getFullYear","name","concat","reverse","PureComponent","CustomTooltip","_ref","payload","className","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleTabChange","bind","assertThisInitialized","state","activeIndex","error","isLoaded","params","fetchData","_this2","panes","time","menuItem","render","renderTable","Tab","menu","pointing","onTabChange","e","_this3","setState","items","Pane","chart_Chart","_this4","fetch","getAppData","then","res","json","result","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0SAAaA,EAAW,2DAKXC,EAAkB,CAJV,QACA,QACC,SACA,kBCDDC,mLAEnB,IAAMC,EAAOC,KAAKC,qBAAqBD,KAAKE,MAAMH,MAElD,OACCI,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACCC,MAAO,IACPC,OAAQ,IACRT,KAAMA,EACNU,OAAQ,CACPC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAGtCV,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAeQ,gBAAgB,QAC/BX,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOS,QAAQ,SACfZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOU,OAAQ,CAAE,KAAM,QACvBb,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASW,QAASd,EAAAC,EAAAC,cAACa,EAAD,CAAeC,QAAQ,MACzChB,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMc,KAAK,WAAWL,QAAQ,QAAQM,OAAO,YAC7ClB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMc,KAAK,WAAWL,QAAQ,OAAOM,OAAO,4DAiB9C,OAZ+BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,IACHG,IAAI,SAACC,GAAS,IAC7BC,EAAiCD,EAAjCC,KAAMC,EAA2BF,EAA3BE,MAAOC,EAAoBH,EAApBG,KAAMC,EAAcJ,EAAdI,KAAMC,EAAQL,EAARK,IAC3BC,EAAoB,IAAIC,KAAKN,GAC7BO,EAAMF,EAAkBG,UACxBC,EAAQJ,EAAkBK,WAAa,EACvCC,EAAON,EAAkBO,WACzBC,EAAOR,EAAkBS,cAE/B,MAAO,CAAEC,KAAI,GAAAC,OAAKT,EAAL,KAAAS,OAAYP,EAAZ,KAAAO,OAAqBH,EAArB,MAAAG,OAA8BL,EAA9B,OAAyCV,QAAOC,OAAMC,OAAMC,SAGxDa,iBApCeC,iBAwC7BC,EAAgB,SAAAC,GAAyB,IAAtB5B,EAAsB4B,EAAtB5B,OAAQ6B,EAAcD,EAAdC,QAChC,GAAI7B,EAAQ,CACX,IAAMW,EAAOkB,EAAQ,IAAMA,EAAQ,GAAGA,SAAWA,EAAQ,GAAGA,QAAQlB,KAC9DC,EAAMiB,EAAQ,IAAMA,EAAQ,GAAGA,SAAWA,EAAQ,GAAGA,QAAQjB,IAEnE,OACC5B,EAAAC,EAAAC,cAAA,OAAK4C,UAAU,kBACd9C,EAAAC,EAAAC,cAAA,kBAAUyB,GACV3B,EAAAC,EAAAC,cAAA,iBAAS0B,IAKZ,OAAO,UCeOmB,cA9Dd,SAAAA,EAAYhD,GAAO,IAAAiD,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAApD,KAAAkD,IAClBC,EAAAC,OAAAE,EAAA,EAAAF,CAAApD,KAAAoD,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAxD,KAAME,KACDuD,gBAAkBN,EAAKM,gBAAgBC,KAArBN,OAAAO,EAAA,EAAAP,QAAAO,EAAA,EAAAP,CAAAD,KACvBA,EAAKS,MAAQ,CACZC,YAAa,EACbC,MAAO,KACPC,UAAU,EACV9C,QAAS,IAPQkC,mFAYlB,IAAMa,EAAM,SAAArB,OAAY9C,EAAgBG,KAAK4D,MAAMC,cAEnD7D,KAAKiE,UAAUD,oCAGP,IAAAE,EAAAlE,KACFmE,EAAQtE,EAAgB4B,IAAI,SAAC2C,GAClC,MAAO,CAAEC,SAAUD,EAAME,OAAQ,kBAAMJ,EAAKK,YAAYL,EAAKN,MAAM3C,aAGpE,OACCd,EAAAC,EAAAC,cAAA,OAAK4C,UAAU,OACd9C,EAAAC,EAAAC,cAACmE,EAAA,EAAD,CAAKC,KAAM,CAAEC,UAAU,GAAQP,MAAOA,EAAOQ,YAAa3E,KAAKyD,gBAC1DI,YAAa7D,KAAK4D,MAAMC,uDAKhBe,EAAG7E,GAAM,IAAA8E,EAAA7E,KACxBA,KAAK8E,SAAS,CAAEjB,YAAa9D,EAAK8D,aAAe,WAChD,IAAMG,EAAM,SAAArB,OAAY9C,EAAgBgF,EAAKjB,MAAMC,cACnDgB,EAAKZ,UAAUD,2CAIO,IAAZe,EAAYzD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GACnB,OAAOnB,EAAAC,EAAAC,cAACmE,EAAA,EAAIQ,KAAL,KAAU7E,EAAAC,EAAAC,cAAC4E,EAAD,CAAOlF,KAAMgF,uCAGrBf,GAAQ,IAAAkB,EAAAlF,KACjBA,KAAK8E,SAAS,CAAEf,UAAU,ICjDrB,SAAoBC,GAC1B,OAAOmB,MAAK,GAAAxC,OAAI/C,GAAJ+C,OAAeqB,IDkD1BoB,CAAWpB,GACTqB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACG,GACLN,EAAKJ,SAAS,CACbf,UAAU,EACV9C,QAASuE,KAGX,SAAC1B,GACAoB,EAAKJ,SAAS,CACbf,UAAU,EACVD,mBAxDY2B,aEIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASzB,OAAOnE,EAAAC,EAAAC,cAAC2F,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,KAAK,SAAAiB,GACjCA,EAAaC","file":"static/js/main.872ac193.chunk.js","sourcesContent":["export const BASE_URL = 'https://www.fxempire.com/api/v1/en/markets/eur-usd/chart';\nexport const MIN_1 = 'MIN_1';\nexport const MIN_5 = 'MIN_5';\nexport const HOUR_1 = 'HOUR_1';\nexport const WEEK_1 = 'WEEK_1';\nexport const TIME_STAMP_LIST = [ MIN_1, MIN_5, HOUR_1, WEEK_1 ];","import React, { PureComponent } from 'react';\nimport { XAxis, YAxis, CartesianGrid, Tooltip, Legend, Line, LineChart } from 'recharts';\n\nexport default class Chart extends PureComponent {\n\trender() {\n\t\tconst data = this.prepareDataFromProps(this.props.data);\n\n\t\treturn (\n\t\t\t<LineChart\n\t\t\t\twidth={700}\n\t\t\t\theight={300}\n\t\t\t\tdata={data}\n\t\t\t\tmargin={{\n\t\t\t\t\ttop: 5, right: 30, left: 20, bottom: 5,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<CartesianGrid strokeDasharray='3 3'/>\n\t\t\t\t<XAxis dataKey='name'/>\n\t\t\t\t<YAxis domain={[ 1.12, 1.13 ]}/>\n\t\t\t\t<Tooltip content={<CustomTooltip active={true}/>}/>\n\t\t\t\t<Legend/>\n\t\t\t\t<Line type='monotone' dataKey='close' stroke='#8884d8'/>\n\t\t\t\t<Line type='monotone' dataKey='open' stroke='#82ca9d'/>\n\t\t\t</LineChart>\n\t\t);\n\t}\n\n\tprepareDataFromProps(data = []) {\n\t\tconst parsedData = data.map((item) => {\n\t\t\tconst { date, close, open, high, low } = item;\n\t\t\tconst dateFromTimestamp = new Date(date);\n\t\t\tconst day = dateFromTimestamp.getDate();\n\t\t\tconst month = dateFromTimestamp.getMonth() + 1;\n\t\t\tconst hour = dateFromTimestamp.getHours();\n\t\t\tconst year = dateFromTimestamp.getFullYear();\n\n\t\t\treturn { name: `${day}/${month}/${year}  ${hour}:00`, close, open, high, low };\n\t\t});\n\n\t\treturn parsedData.reverse();\n\t}\n}\n\nconst CustomTooltip = ({ active, payload }) => {\n\tif (active) {\n\t\tconst high = payload[0] && payload[0].payload && payload[0].payload.high;\n\t\tconst low = payload[0] && payload[0].payload && payload[0].payload.low;\n\n\t\treturn (\n\t\t\t<div className=\"custom-tooltip\">\n\t\t\t\t<p>high: {high}</p>\n\t\t\t\t<p>low: {low}</p>\n\t\t\t</div>\n\t\t);\n\t}\n\n\treturn null;\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Tab } from 'semantic-ui-react';\nimport { TIME_STAMP_LIST } from './constants';\nimport Chart from './components/chart';\nimport { getAppData } from './apService';\n\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleTabChange = this.handleTabChange.bind(this);\n\t\tthis.state = {\n\t\t\tactiveIndex: 0,\n\t\t\terror: null,\n\t\t\tisLoaded: false,\n\t\t\tcontent: []\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tconst params = `?time=${TIME_STAMP_LIST[this.state.activeIndex]}`;\n\n\t\tthis.fetchData(params);\n\t}\n\n\trender() {\n\t\tconst panes = TIME_STAMP_LIST.map((time) => {\n\t\t\treturn { menuItem: time, render: () => this.renderTable(this.state.content) }\n\t\t});\n\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<Tab menu={{ pointing: true }} panes={panes} onTabChange={this.handleTabChange}\n\t\t\t\t     activeIndex={this.state.activeIndex}/>\n\t\t\t</div>\n\t\t);\n\t}\n\n\thandleTabChange(e, data) {\n\t\tthis.setState({ activeIndex: data.activeIndex }, () => {\n\t\t\tconst params = `?time=${TIME_STAMP_LIST[this.state.activeIndex]}`;\n\t\t\tthis.fetchData(params);\n\t\t});\n\t}\n\n\trenderTable(items = []) {\n\t\treturn <Tab.Pane><Chart data={items}/></Tab.Pane>;\n\t}\n\n\tfetchData(params) {\n\t\tthis.setState({ isLoaded: false });\n\n\t\tgetAppData(params)\n\t\t\t.then(res => res.json())\n\t\t\t.then((result) => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tisLoaded: true,\n\t\t\t\t\t\tcontent: result\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t(error) => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tisLoaded: true,\n\t\t\t\t\t\terror\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t)\n\t}\n}\n\nexport default App;\n","import { BASE_URL } from './constants';\n\nexport function getAppData(params) {\n\treturn fetch(`${BASE_URL}${params}`);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}