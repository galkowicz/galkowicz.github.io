{"version":3,"sources":["components/ListItem.js","util.js","dataManager/generalSlice.js","components/SearchList.js","dataManager/peopleSlice.js","dataManager/planetsSlice.js","dataManager/speciesSlice.js","components/FavoritesList.js","components/SelectedItem.js","components/PeopleList.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["ListItem","name","isFavorite","isSelected","onFavoriteClick","isWithFavorite","index","onItemSelected","favoriteAmount","iconName","iconColor","className","onClick","e","stopPropagation","Icon","color","style","float","paddingRight","BASE_URL","getUrl","url","accumulatedResults","fetchAllPages","a","Promise","resolve","data","fetch","response","json","results","next","push","replace","getAllPeople","key","peopleUrlArray","all","map","generalSlice","createSlice","initialState","selectedItem","favorites","reducers","setSelectedItem","state","action","payload","addToFavorites","favUrl","removeFromFavorites","actions","general","selectFavorites","SearchList","items","listHeader","status","objectItem","useSelector","dispatch","useDispatch","React","useState","searchString","setSearchString","list","setList","isDoneLoading","useEffect","updatedList","filter","item","toLowerCase","includes","Container","marginTop","cursor","Header","as","Input","onChange","currentTarget","value","placeholder","Segment","height","rowRenderer","listItem","people","residents","reduce","acc","curr","calculateFavoritesAmount","rowCount","length","width","rowHeight","Dimmer","active","inverted","Loader","indeterminate","filename","fetchPeople","createAsyncThunk","peopleSlice","error","extraReducers","pending","fulfilled","concat","rejected","message","selectPeople","fetchPlanets","planetsSlice","planets","selectPlanets","fetchSpecies","speciesSlice","species","selectSpecies","FavoritesList","List","Object","entries","Item","SelectedItem","Content","Description","PeopleList","isSelectedPeople","useMemo","urlArray","getPeopleUrlArray","useQuery","staleTime","Infinity","isLoading","App","peopleStatus","planetsStatus","speciesStatus","paddingTop","textAlign","Grid","columns","container","stackable","Row","Column","favorite","rootReducer","combineReducers","peopleReducer","planetsReducer","speciesReducer","generalReducer","persistConfig","version","storage","blacklist","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea97c984.chunk.js","sourcesContent":["import React from 'react'\nimport { Icon } from 'semantic-ui-react'\n\nimport './ListItem.scss'\n\nconst ListItem = ({\n  name,\n  isFavorite,\n  isSelected,\n  onFavoriteClick,\n  isWithFavorite,\n  index,\n  onItemSelected,\n  favoriteAmount = 0,\n}) => {\n  const iconName = isFavorite ? 'star' : 'star outline'\n  const iconColor = isFavorite ? 'yellow' : 'black'\n  const className = isSelected ? 'selected' : ''\n\n  return (\n    <div className={`list-item ${className}`} onClick={onItemSelected}>\n      <span className=\"list-item__name\">{name}</span>\n      {isWithFavorite && (\n        <div\n          className=\"list-item__icon\"\n          onClick={(e) => {\n            onFavoriteClick(index)\n            e.stopPropagation()\n          }}\n        >\n          <Icon name={iconName} color={iconColor} />\n        </div>\n      )}\n      <div className=\"favorite-amount\" style={{ float: 'right', paddingRight: '25px' }}>\n        {favoriteAmount ? `(${favoriteAmount})` : ''}\n      </div>\n    </div>\n  )\n}\n\nexport default ListItem\n","export const BASE_URL = 'https://swapi.dev/api'\n\nexport const getUrl = (url) => {\n  let accumulatedResults = []\n\n  const fetchAllPages = async (url) => {\n    if (!url) {\n      return Promise.resolve({ data: accumulatedResults })\n    }\n    const response = await fetch(url)\n    const { results, next } = await response.json()\n    accumulatedResults.push(...results)\n    return fetchAllPages(next && next.replace('http', 'https'))\n  }\n\n  accumulatedResults = []\n  return fetchAllPages(url)\n}\n\nexport const getAllPeople = async (key, { peopleUrlArray }) => {\n  return await Promise.all(\n    peopleUrlArray.map(async (url) => {\n      const response = await fetch(url.replace('http', 'https'))\n      return response.json()\n    }),\n  )\n}\n\nexport const calculateFavoritesAmount = (listItem, favorites) => {\n  let people = []\n\n  if (listItem.residents) {\n    people = listItem.residents\n  }\n\n  if (listItem.people) {\n    people = listItem.people\n  }\n\n  return people.reduce((acc, curr) => {\n    if (favorites[curr]) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\nexport const generalSlice = createSlice({\n  name: 'general',\n  initialState: {\n    selectedItem: null,\n    favorites: {},\n  },\n  reducers: {\n    setSelectedItem: (state, action) => {\n      state.selectedItem = action.payload\n    },\n    addToFavorites: (state, action) => {\n      const { favUrl, name } = action.payload\n\n      state.favorites = { ...state.favorites, [favUrl]: name }\n    },\n    removeFromFavorites: (state, action) => {\n      const { favUrl } = action.payload\n\n      state.favorites = { ...state.favorites, [favUrl]: false }\n    },\n  },\n})\n\nexport const { setSelectedItem, addToFavorites, removeFromFavorites } = generalSlice.actions\n\nexport const selectedItem = (state) => state.general.selectedItem || {}\nexport const selectFavorites = (state) => state.general.favorites\n\nexport default generalSlice.reducer\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Container, Header, Input, Dimmer, Loader, Segment } from 'semantic-ui-react'\nimport { CSVLink } from 'react-csv'\nimport { List } from 'react-virtualized'\nimport ListItem from './ListItem'\nimport { calculateFavoritesAmount } from '../util'\nimport { selectedItem, setSelectedItem, selectFavorites } from '../dataManager/generalSlice'\n\nconst SearchList = ({ items = [], listHeader = '', onFavoriteClick = false, status }) => {\n  const objectItem = useSelector(selectedItem)\n  const favorites = useSelector(selectFavorites)\n  const dispatch = useDispatch()\n\n  const [searchString, setSearchString] = React.useState('')\n  const [list, setList] = React.useState(items)\n\n  const isWithFavorite = typeof onFavoriteClick === 'function'\n  const isDoneLoading = status === 'succeeded' || status === 'failed'\n\n  React.useEffect(() => {\n    let updatedList\n    if (searchString !== '') {\n      updatedList = items.filter((item) => item.name.toLowerCase().includes(searchString.toLowerCase()))\n    } else {\n      updatedList = items\n    }\n\n    setList(updatedList)\n  }, [items, searchString])\n\n  const handleInputChange = (e) => {\n    setSearchString(e.currentTarget.value)\n  }\n\n  const rowRenderer = ({ key, index, style }) => {\n    const { name, url } = list[index]\n    const isFavorite = favorites[url]\n    const isSelected = objectItem && url === objectItem.url\n    const favoriteAmount = calculateFavoritesAmount(list[index], favorites)\n\n    return (\n      <div key={key} style={style}>\n        <ListItem\n          name={name}\n          isFavorite={isFavorite}\n          isSelected={isSelected}\n          index={index}\n          onItemSelected={() => {\n            dispatch(setSelectedItem(list[index]))\n          }}\n          onFavoriteClick={() => {\n            onFavoriteClick({ favUrl: list[index].url, name: list[index].name })\n          }}\n          isWithFavorite={isWithFavorite}\n          favoriteAmount={favoriteAmount}\n        />\n      </div>\n    )\n  }\n\n  return (\n    <Container style={{ marginTop: '2em', cursor: 'default' }}>\n      <Header as=\"h2\">{listHeader}</Header>\n      <Input onChange={handleInputChange} placeholder=\"Search...\" />\n      <Segment style={{ height: '16rem' }}>\n        {isDoneLoading ? (\n          <List rowRenderer={rowRenderer} rowCount={list.length} width={300} height={200} rowHeight={20} />\n        ) : (\n          <Dimmer active inverted>\n            <Loader indeterminate>Loading List</Loader>\n          </Dimmer>\n        )}\n      </Segment>\n      {isDoneLoading && (\n        <CSVLink data={list} filename={`${listHeader.toLowerCase()}.csv`}>\n          Download list\n        </CSVLink>\n      )}\n    </Container>\n  )\n}\n\nexport default SearchList\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { BASE_URL, getUrl } from '../util'\n\nexport const fetchPeople = createAsyncThunk('people/fetchPeople', async () => {\n  const response = await getUrl(`${BASE_URL}/people/`)\n  return response.data\n})\n\nexport const peopleSlice = createSlice({\n  name: 'people',\n  initialState: {\n    people: [],\n    favorites: {},\n    status: 'idle',\n    error: null,\n  },\n  extraReducers: {\n    [fetchPeople.pending]: (state) => {\n      state.status = 'loading'\n    },\n    [fetchPeople.fulfilled]: (state, action) => {\n      state.status = 'succeeded'\n      state.people = state.people.concat(action.payload)\n    },\n    [fetchPeople.rejected]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    },\n  },\n})\n\nexport const selectPeople = (state) => state.people\n\nexport default peopleSlice.reducer\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { BASE_URL, getUrl } from \"../util\";\n\nexport const fetchPlanets = createAsyncThunk('planets/fetchPlanets', async () => {\n  const response = await getUrl(`${BASE_URL}/planets/`)\n  return response.data\n})\n\nexport const planetsSlice = createSlice({\n  name: 'planets',\n  initialState: {\n    planets: [],\n    status: 'idle',\n    error: null,\n  },\n  extraReducers: {\n    [fetchPlanets.pending]: (state) => {\n      state.status = 'loading'\n    },\n    [fetchPlanets.fulfilled]: (state, action) => {\n      state.status = 'succeeded'\n      state.planets = state.planets.concat(action.payload)\n    },\n    [fetchPlanets.rejected]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    },\n  },\n})\n\nexport const selectPlanets = (state) => state.planets\n\nexport default planetsSlice.reducer\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { BASE_URL, getUrl } from '../util'\n\nexport const fetchSpecies = createAsyncThunk('species/fetchSpecies', async () => {\n  const response = await getUrl(`${BASE_URL}/species/`)\n  return response.data\n})\n\nexport const speciesSlice = createSlice({\n  name: 'species',\n  initialState: {\n    species: [],\n    status: 'idle',\n    error: null,\n  },\n  extraReducers: {\n    [fetchSpecies.pending]: (state) => {\n      state.status = 'loading'\n    },\n    [fetchSpecies.fulfilled]: (state, action) => {\n      state.status = 'succeeded'\n      state.species = state.species.concat(action.payload)\n    },\n    [fetchSpecies.rejected]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.error.message\n    },\n  },\n})\n\nexport const selectSpecies = (state) => state.species\n\nexport default speciesSlice.reducer\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Header, List } from 'semantic-ui-react'\nimport { selectFavorites } from '../dataManager/generalSlice'\n\nconst FavoritesList = () => {\n  const favorites = useSelector(selectFavorites)\n\n  return (\n    <>\n      <Header as=\"h1\">Favorite People:</Header>\n      <List className=\"favorites-list\">\n        {Object.entries(favorites).map((item) => {\n          const [key, value] = item\n          return <List.Item key={key}>{value}</List.Item>\n        })}\n      </List>\n    </>\n  )\n}\n\nexport default FavoritesList\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Header, List } from 'semantic-ui-react'\nimport { selectedItem } from '../dataManager/generalSlice'\n\nconst SelectedItem = () => {\n  const objectItem = useSelector(selectedItem)\n\n  return (\n    <>\n      <Header as=\"h1\">Selected Item:</Header>\n      {objectItem && (\n        <List className=\"favorites-list\">\n          {Object.entries(objectItem).map((item) => {\n            const [key, value] = item\n            return (\n              <List.Item key={key}>\n                <List.Content>\n                  <List.Header>{key}</List.Header>\n                  <List.Description>{value}</List.Description>\n                </List.Content>\n              </List.Item>\n            )\n          })}\n        </List>\n      )}\n    </>\n  )\n}\n\nexport default SelectedItem\n","import React from 'react'\nimport { useQuery } from 'react-query'\nimport { useSelector } from 'react-redux'\nimport { Dimmer, Header, List, Loader, Segment } from 'semantic-ui-react'\nimport { selectedItem } from '../dataManager/generalSlice'\nimport { getAllPeople } from '../util'\n\nconst getPeopleUrlArray = (objectItem) => {\n  let urlArray = []\n  if (objectItem.residents) {\n    urlArray = objectItem.residents\n  }\n  if (objectItem.people) {\n    urlArray = objectItem.people\n  }\n\n  return urlArray\n}\n\nconst PeopleList = () => {\n  const objectItem = useSelector(selectedItem) || {}\n  const isSelectedPeople = objectItem.url && objectItem.url.includes('people')\n  const peopleUrlArray = React.useMemo(() => getPeopleUrlArray(objectItem), [objectItem])\n  const { isLoading, data = [] } = useQuery([objectItem.url, { peopleUrlArray }], getAllPeople, {\n    staleTime: Infinity,\n  })\n\n  if (isSelectedPeople) {\n    return null\n  }\n\n  return (\n    <>\n      <Header as=\"h1\">{`${objectItem.name || ''} Characters:`}</Header>\n      <Segment style={{ height: '20rem' }}>\n        <List className=\"items-people-list\">\n          {isLoading && (\n            <Dimmer active inverted>\n              <Loader indeterminate>Loading List</Loader>\n            </Dimmer>\n          )}\n          {data.map((item) => {\n            return <List.Item key={item.url}>{item.name}</List.Item>\n          })}\n        </List>\n      </Segment>\n    </>\n  )\n}\n\nexport default PeopleList\n","import React from 'react'\nimport { Grid, Header } from 'semantic-ui-react'\nimport './App.scss'\nimport SearchList from './components/SearchList'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { selectPeople } from './dataManager/peopleSlice'\nimport { addToFavorites, removeFromFavorites, selectFavorites } from './dataManager/generalSlice'\nimport { selectPlanets } from './dataManager/planetsSlice'\nimport { selectSpecies } from './dataManager/speciesSlice'\nimport FavoritesList from './components/FavoritesList'\nimport SelectedItem from './components/SelectedItem'\nimport PeopleList from './components/PeopleList'\n\nfunction App() {\n  const favorites = useSelector(selectFavorites)\n  const { people, status: peopleStatus } = useSelector(selectPeople)\n  const { planets, status: planetsStatus } = useSelector(selectPlanets)\n  const { species, status: speciesStatus } = useSelector(selectSpecies)\n\n  const dispatch = useDispatch()\n\n  const handleToggleFavorite = (favorite) => {\n    if (favorites[favorite.favUrl]) {\n      dispatch(removeFromFavorites(favorite))\n    } else {\n      dispatch(addToFavorites(favorite))\n    }\n  }\n\n  return (\n    <div className=\"App\" style={{ paddingTop: '4em' }}>\n      <Header as=\"h1\" textAlign=\"center\">\n        Star Wars Social Media\n      </Header>\n      <Grid columns=\"equal\" container stackable>\n        <Grid.Row columns=\"equal\">\n          <Grid.Column>\n            <SearchList\n              items={people}\n              status={peopleStatus}\n              listHeader=\"People\"\n              onFavoriteClick={({ favUrl, name }) => {\n                handleToggleFavorite({ favUrl, name })\n              }}\n            />\n          </Grid.Column>\n          <Grid.Column>\n            <SearchList items={planets} status={planetsStatus} listHeader=\"Plants\" />\n          </Grid.Column>\n          <Grid.Column>\n            <SearchList items={species} status={speciesStatus} listHeader=\"Species\" />\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row columns=\"equal\">\n          <Grid.Column>\n            <SelectedItem />\n          </Grid.Column>\n          <Grid.Column>\n            <PeopleList />\n          </Grid.Column>\n          <Grid.Column>\n            <FavoritesList />\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </div>\n  )\n}\n\nexport default App\n","import { configureStore, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport peopleReducer from '../dataManager/peopleSlice'\nimport planetsReducer from '../dataManager/planetsSlice'\nimport speciesReducer from '../dataManager/speciesSlice'\nimport generalReducer from '../dataManager/generalSlice'\n\nconst rootReducer = combineReducers({\n  people: peopleReducer,\n  planets: planetsReducer,\n  species: speciesReducer,\n  general: generalReducer,\n})\n\nconst persistConfig = {\n  key: 'root',\n  version: 1,\n  storage,\n  blacklist: ['species', 'people', 'planets'],\n}\n\nexport const persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n})\n\nexport let persistor = persistStore(store)\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { persistor, store } from './app/store'\nimport * as serviceWorker from './serviceWorker'\nimport { fetchPeople } from './dataManager/peopleSlice'\nimport { fetchPlanets } from './dataManager/planetsSlice'\nimport { fetchSpecies } from './dataManager/speciesSlice'\n\nstore.dispatch(fetchPeople())\nstore.dispatch(fetchPlanets())\nstore.dispatch(fetchSpecies())\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}