{"version":3,"sources":["fakeDB.ts","components/Table/index.tsx","util.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Status","Table","tableData","tableColumns","onRowClick","handleRowClick","e","currentTarget","id","className","cellPadding","cellSpacing","map","item","key","index","data","metadata","attributes","Object","keys","reduce","acc","cur","metadataToCustomAttributes","onClick","values","colData","managers","name","manager","accounts","accountManager","status","active","closed","parseAccountsData","managerEmployees","selectedManager","account","disabled","isHighlighted","isAccountManagedBySelected","findIndex","isAccountOfSelected","isHighlightedAccount","ishighlighted","parseManagersData","noAccounts","managerName","find","isManagerWithNoAccounts","selected","noaccounts","App","React","useState","paredManagers","setManagers","paredAccounts","setAccounts","managerId","getManagerById","managersArray","result","recursiveSearch","length","forEach","managersFound","filter","findAllEmployeesOfManager","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0229f6df.chunk.js","sourcesContent":["export interface Manager {\n  id: string\n  name: string\n  manager: string | null\n}\n\nexport interface Account {\n  id: string\n  name: string\n  accountManager: string\n  status: Status\n}\n\nexport enum Status {\n  active = 'ACTIVE',\n  closed = 'CLOSED',\n}\n\nconst managers: Manager[] = [\n  { id: '1', name: 'alice', manager: null },\n  { id: '2', name: 'bob', manager: 'alice' },\n  { id: '3', name: 'charlie', manager: 'alice' },\n  { id: '4', name: 'dave', manager: 'bob' },\n  { id: '5', name: 'eve', manager: 'charlie' },\n  { id: '6', name: 'frank', manager: null },\n  { id: '7', name: 'grace', manager: 'ivan' },\n  { id: '8', name: 'heidi', manager: 'alice' },\n  { id: '9', name: 'ivan', manager: 'bob' },\n]\n\nconst accounts: Account[] = [\n  { id: '1', name: 'hp', accountManager: 'alice', status: Status.active },\n  { id: '2', name: 'ibm', accountManager: 'bob', status: Status.active },\n  { id: '3', name: 'google', accountManager: 'charlie', status: Status.active },\n  { id: '4', name: 'mySpace', accountManager: 'eve', status: Status.closed },\n  { id: '5', name: 'united', accountManager: 'dave', status: Status.active },\n  { id: '6', name: 'facebook', accountManager: 'bob', status: Status.active },\n  { id: '8', name: 'amazon', accountManager: 'bob', status: Status.closed },\n  { id: '9', name: 'monday', accountManager: 'heidi', status: Status.closed },\n  { id: '10', name: 'gm', accountManager: 'bob', status: Status.active },\n  { id: '11', name: 'britishAirways', accountManager: 'frank', status: Status.active },\n  { id: '12', name: 'apple', accountManager: 'frank', status: Status.active },\n  { id: '13', name: 'microsoft', accountManager: 'ivan', status: Status.closed },\n]\n\nexport { managers, accounts }\n","import React from 'react'\nimport './table.scss'\n\ninterface TableData {\n  data: { id: string }\n  [metadata: string]: any\n}\n\ntype Props = {\n  tableData: TableData[]\n  tableColumns: string[]\n  onRowClick?(rowId: string): void\n}\n\nconst metadataToCustomAttributes = (metadata: any) => {\n  return Object.keys(metadata).reduce((acc, cur) => {\n    return { ...acc, [`data-${cur}`]: metadata[cur] }\n  }, {})\n}\n\nconst Table: React.FC<Props> = ({ tableData = [], tableColumns = [], onRowClick = () => null }) => {\n  const handleRowClick = (e: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => {\n    onRowClick(e.currentTarget.id)\n  }\n\n  return (\n    <table className=\"table\" cellPadding=\"0\" cellSpacing=\"0\">\n      <thead className=\"table__header\">\n        <tr className=\"table-row\">\n          {tableColumns.map((item) => (\n            <th key={item}>{item}</th>\n          ))}\n        </tr>\n      </thead>\n\n      <tbody className=\"table__body\">\n        {tableData.map((item, index) => {\n          const { data, metadata = {} } = item\n          const attributes = metadataToCustomAttributes(metadata)\n\n          return (\n            <tr className=\"table-row\" key={index} onClick={handleRowClick} id={data.id} {...attributes}>\n              {Object.values(data).map((colData) => (\n                <td key={`${index}-${colData}`}>{colData}</td>\n              ))}\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n\nexport default Table\n","import { Account, Manager, Status } from './fakeDB'\n\nconst isManagerWithNoAccounts = (managerName: string, accounts: Account[]) => {\n  const accountFound = accounts.find((account) => account.accountManager === managerName)\n  return !accountFound\n}\n\nconst isHighlightedAccount = (account: Account, managerEmployees: string[], selectedManager: string) => {\n  const isAccountManagedBySelected = managerEmployees.findIndex((name: string) => name === account.accountManager)\n  const isAccountOfSelected = account.accountManager === selectedManager\n\n  return isAccountManagedBySelected !== -1 || isAccountOfSelected\n}\n\nconst parseAccountsData = (accounts: Account[], managerEmployees: string[], selectedManager: string) => {\n  return accounts.map((account) => {\n    const disabled = account.status === Status.closed\n    const isHighlighted = isHighlightedAccount(account, managerEmployees, selectedManager)\n\n    return { data: { ...account }, metadata: { disabled, ishighlighted: isHighlighted } }\n  })\n}\n\nconst parseManagersData = (managers: Manager[], accounts: Account[], selectedManager: string) => {\n  return managers.map((manager) => {\n    const noAccounts = isManagerWithNoAccounts(manager.name, accounts)\n    const selected = selectedManager === manager.name\n\n    return { data: { ...manager }, metadata: { noaccounts: noAccounts, selected} }\n  })\n}\n\nconst findAllEmployeesOfManager = (managersArray: string[], managers: Manager[]) => {\n  let result: Array<string> = []\n\n  const recursiveSearch = (managersArray: string[], managers: Manager[]) => {\n    if (managersArray.length === 0) {\n      return result\n    }\n\n    managersArray.forEach((managerName) => {\n      const managersFound = managers\n        .filter((manager) => {\n          return manager.manager === managerName\n        })\n        .map((manager) => manager.name)\n      result = [...result, ...managersFound]\n\n      recursiveSearch(managersFound, managers)\n    })\n  }\n\n  recursiveSearch(managersArray, managers)\n\n  return result\n}\n\nconst getManagerById = (managerId: string, managers: Manager[]) => {\n  return managers.find((manager) => manager.id === managerId)\n}\n\nexport { parseAccountsData, parseManagersData, findAllEmployeesOfManager, getManagerById }\n","import React from 'react'\nimport './App.scss'\nimport Table from './components/Table'\nimport { managers, accounts } from './fakeDB'\nimport { parseAccountsData, parseManagersData, findAllEmployeesOfManager, getManagerById } from './util'\n\nfunction App() {\n  const [paredManagers, setManagers] = React.useState(parseManagersData(managers, accounts, ''))\n  const [paredAccounts, setAccounts] = React.useState(parseAccountsData(accounts, [], ''))\n\n  const handleManagerClick = (managerId: string) => {\n    const selectedManager = getManagerById(managerId, managers)\n    const { name } = selectedManager || { name: '' }\n    const managerEmployees = findAllEmployeesOfManager([name], managers)\n\n    setAccounts(parseAccountsData(accounts, managerEmployees, name))\n    setManagers(parseManagersData(managers, accounts, name))\n  }\n\n  return (\n    <div className=\"App container\">\n      <div className=\"managers\">\n        <Table tableData={paredManagers} tableColumns={['id', 'name', 'manager']} onRowClick={handleManagerClick} />\n      </div>\n      <div className=\"accounts\">\n        <Table tableData={paredAccounts} tableColumns={['id', 'name', 'account manager', 'status']} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}