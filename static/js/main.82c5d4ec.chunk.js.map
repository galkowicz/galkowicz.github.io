{"version":3,"sources":["assets/squirrel.jpg","components/draggableShape.js","components/imageCropper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DraggableShape","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onDragStart","bind","assertThisInitialized","state","isDragStarted","event","style","window","getComputedStyle","currentTarget","left","getPropertyValue","top","dataTransfer","setData","concat","parseInt","clientX","clientY","setState","_this$props","onClose","src","react_default","a","createElement","className","draggable","id","Icon","name","onClick","size","alt","Component","ImageCropper","resetShape","cropShape","draw","onMouseDown","onMouseUp","onMouseMove","setPoints","drawImage","shape","croppedSrc","canvasWidth","canvasHeight","points","prevX","currX","prevY","currY","_this2","refs","image","onload","imageSrc","lastClickedPoint","length","ref","width","height","draggableShape","initialPosition","Button","clearCrop","e","start","canvas","offsetLeft","offsetTop","toConsumableArray","x","y","dx","dy","ctx","getContext","_this$points","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","closePath","clearRect","img","minX","minY","maxX","maxY","i","save","clip","restore","croppedCanvas","document","cx","toDataURL","fillStyle","fill","alpha","arguments","undefined","globalAlpha","App","handleDragOver","handleDrop","onDragOver","onDrop","Container","Segment","Header","as","imageCropper","squirrel","preventDefault","getElementById","offset","getData","split","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82c5d4ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/squirrel.8f334af2.jpg\";","import React, { Component } from 'react';\nimport { Icon } from 'semantic-ui-react'\n\nclass DraggableShape extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.onDragStart = this.onDragStart.bind(this);\n\t\tthis.state = {isDragStarted: false};\n\t}\n\n\tonDragStart(event) {\n\t\tconst style = window.getComputedStyle(event.currentTarget, null);\n\t\tconst left = style.getPropertyValue('left');\n\t\tconst top = style.getPropertyValue('top');\n\t\tevent.dataTransfer.setData('text/plain',\n\t\t\t`${(parseInt(left, 10) - event.clientX)},${(parseInt(top, 10) - event.clientY)}`);\n\t\tthis.setState({isDragStarted: true});\n\t};\n\n\trender() {\n\t\tconst { onClose, src } = this.props;\n\n\t\tif (!src) {\n\t\t\treturn null;\n\t\t}\n\t\treturn (\n\t\t\t<div className='draggable-shape' draggable onDragStart={this.onDragStart} id='cropped'>\n\t\t\t\t<Icon name='times' onClick={onClose} className='icon' size='large'/>\n\t\t\t\t<img src={src} alt=''/>\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\nexport default DraggableShape;","import React, { Component } from 'react';\nimport { Button } from 'semantic-ui-react';\nimport DraggableShape from './draggableShape';\n\nclass ImageCropper extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.resetShape = this.resetShape.bind(this);\n\t\tthis.cropShape = this.cropShape.bind(this);\n\t\tthis.draw = this.draw.bind(this);\n\t\tthis.onMouseDown = this.onMouseDown.bind(this);\n\t\tthis.onMouseUp = this.onMouseUp.bind(this);\n\t\tthis.onMouseMove = this.onMouseMove.bind(this);\n\t\tthis.setPoints = this.setPoints.bind(this);\n\t\tthis.drawImage = this.drawImage.bind(this);\n\n\t\tthis.state = { shape: [], draw: false, croppedSrc: null };\n\t\tthis.canvasWidth = 640;\n\t\tthis.canvasHeight = 425;\n\t\tthis.points = {\n\t\t\tprevX: 0, currX: 0, prevY: 0, currY: 0\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst img = this.refs.image;\n\n\t\timg.onload = () => {\n\t\t\tthis.drawImage()\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { imageSrc } = this.props;\n\t\tconst lastClickedPoint = this.state.shape[this.state.shape.length -1];\n\n\t\treturn <div>\n\t\t\t<canvas ref='canvas' onMouseDown={this.onMouseDown} onMouseUp={this.onMouseUp} onMouseMove={this.onMouseMove}\n\t\t\t        className='image-crop-canvas'\n\t\t\t        width={this.canvasWidth} height={this.canvasHeight}/>\n\t\t\t<img ref={'image'} src={imageSrc} className='hidden' alt=''/>\n\t\t\t<DraggableShape onClose={this.resetShape} src={this.state.croppedSrc} initialPosition={lastClickedPoint}/>\n\t\t\t<Button onClick={this.resetShape} className='reset-button'>Reset</Button>\n\t\t</div>;\n\t}\n\n\tresetShape() {\n\t\tthis.setState({ shape: [], croppedSrc: null });\n\t\tthis.clearCrop();\n\t}\n\n\tonMouseMove(e) {\n\t\tif (this.state.draw) {\n\t\t\tthis.setPoints(e);\n\t\t\tthis.draw();\n\t\t}\n\t}\n\n\tonMouseDown(e) {\n\t\tthis.setState({ draw: true });\n\t\tthis.start = true;\n\t\tthis.setPoints(e);\n\t}\n\n\tsetPoints(e) {\n\t\tconst canvas = this.refs.canvas;\n\n\t\tthis.points.prevX = this.points.currX;\n\t\tthis.points.prevY = this.points.currY;\n\t\tthis.points.currX = parseInt(e.clientX - canvas.offsetLeft);\n\t\tthis.points.currY = parseInt(e.clientY - canvas.offsetTop);\n\t\tthis.setState({ shape: [ ...this.state.shape, { x: this.points.currX, y: this.points.currY } ] });\n\n\t}\n\n\tonMouseUp() {\n\t\tconst dx = this.points.currX - this.state.shape[0].x;\n\t\tconst dy = this.points.currY - this.state.shape[0].y;\n\n\t\tif (dx * dx + dy * dy < 1000) {\n\t\t\tthis.cropShape();\n\t\t} else {\n\t\t\tthis.resetShape();\n\t\t}\n\n\t\tthis.setState({ draw: false });\n\t}\n\n\tdraw() {\n\t\tconst canvas = this.refs.canvas;\n\t\tconst ctx = canvas.getContext('2d');\n\t\tconst { currX, currY, prevX, prevY } = this.points;\n\n\t\tctx.beginPath();\n\t\tctx.moveTo(prevX, prevY);\n\t\tctx.lineTo(currX, currY);\n\t\tctx.strokeStyle = 'black';\n\t\tctx.lineWidth = 2;\n\t\tctx.stroke();\n\t\tctx.closePath();\n\t}\n\n\tclearCrop() {\n\t\tconst canvas = this.refs.canvas;\n\t\tconst ctx = canvas.getContext('2d');\n\t\tctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n\t\tthis.drawImage();\n\t}\n\n\tcropShape() {\n\t\tconst canvas = this.refs.canvas;\n\t\tconst ctx = canvas.getContext('2d');\n\t\tconst img = this.refs.image;\n\n\t\tconst { shape } = this.state;\n\t\tlet minX = 10000;\n\t\tlet minY = 10000;\n\t\tlet maxX = -10000;\n\t\tlet maxY = -10000;\n\n\t\tfor (let i = 1; i < shape.length; i++) {\n\t\t\tconst p = shape[i];\n\t\t\tif (p.x < minX) {\n\t\t\t\tminX = p.x;\n\t\t\t}\n\t\t\tif (p.y < minY) {\n\t\t\t\tminY = p.y;\n\t\t\t}\n\t\t\tif (p.x > maxX) {\n\t\t\t\tmaxX = p.x;\n\t\t\t}\n\t\t\tif (p.y > maxY) {\n\t\t\t\tmaxY = p.y;\n\t\t\t}\n\t\t}\n\t\tconst width = maxX - minX;\n\t\tconst height = maxY - minY;\n\n\t\tctx.save();\n\t\tctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\t\tctx.beginPath();\n\t\tctx.moveTo(shape[0].x, shape[0].y);\n\n\t\tfor (let i = 1; i < shape.length; i++) {\n\t\t\tctx.lineTo(shape[i].x, shape[i].y);\n\t\t}\n\t\tctx.closePath();\n\t\tctx.clip();\n\t\tctx.drawImage(img, 0, 0);\n\t\tctx.restore();\n\n\n\t\tconst croppedCanvas = document.createElement('canvas');\n\t\tconst cx = croppedCanvas.getContext('2d');\n\n\t\tcroppedCanvas.width = width;\n\t\tcroppedCanvas.height = height;\n\n\t\tcx.drawImage(canvas, minX, minY, width, height, 0, 0, width, height);\n\n\t\tthis.setState({ croppedSrc: croppedCanvas.toDataURL() });\n\n\t\tthis.drawImage();\n\n\t\tctx.fillStyle = 'grey';\n\t\tctx.fill();\n\t}\n\n\tdrawImage(alpha = 1) {\n\t\tconst canvas = this.refs.canvas;\n\t\tconst ctx = canvas.getContext('2d');\n\t\tconst img = this.refs.image;\n\n\t\tctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\t\tctx.globalAlpha = alpha;\n\t\tctx.drawImage(img, 0, 0);\n\t\tctx.globalAlpha = 1.00;\n\t}\n\n}\n\nexport default ImageCropper;","import React, { Component } from 'react';\nimport './App.css';\nimport squirrel from './assets/squirrel.jpg';\nimport { Container, Header, Segment } from 'semantic-ui-react';\nimport ImageCropper from './components/imageCropper';\n\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleDragOver = this.handleDragOver.bind(this);\n\t\tthis.handleDrop = this.handleDrop.bind(this);\n\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='App' onDragOver={this.handleDragOver} onDrop={this.handleDrop}>\n\t\t\t\t<Container>\n\t\t\t\t\t<Segment><Header as='h1'>Please draw a path to create a puzzle piece</Header></Segment>\n\t\t\t\t\t<ImageCropper imageSrc={squirrel}/>\n\t\t\t\t</Container>\n\t\t\t</div>\n\t\t);\n\t}\n\n\n\thandleDragOver(event) {\n\t\tevent.preventDefault();\n\t\treturn false;\n\t}\n\n\thandleDrop(event) {\n\t\tconst draggable = document.getElementById('cropped');\n\t\tconst offset = event.dataTransfer.getData('text/plain').split(',');\n\n\t\tdraggable.style.left = (event.clientX + parseInt(offset[0], 10)) + 'px';\n\t\tdraggable.style.top = (event.clientY + parseInt(offset[1], 10)) + 'px';\n\t\tevent.preventDefault();\n\t\treturn false;\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}